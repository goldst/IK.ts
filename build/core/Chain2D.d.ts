import { BaseboneConstraintType, ConnectionType } from '../constants';
import { V2 } from '../math/V2';
import { Bone2D } from './Bone2D';
export declare class Chain2D {
    static isChain2D: boolean;
    tmpTarget: V2;
    bones: Bone2D[];
    name: string;
    solveDistanceThreshold: number;
    minIterationChange: number;
    maxIteration: number;
    precision: number;
    chainLength: number;
    numBones: number;
    baseLocation: V2;
    fixedBaseMode: boolean;
    baseboneConstraintType: BaseboneConstraintType;
    baseboneConstraintUV: V2;
    baseboneRelativeConstraintUV: V2;
    lastTargetLocation: V2;
    lastBaseLocation: V2;
    boneConnectionPoint: ConnectionType;
    currentSolveDistance: number;
    connectedChainNumber: number;
    connectedBoneNumber: number;
    embeddedTarget: V2;
    useEmbeddedTarget: boolean;
    constructor();
    clone(): Chain2D;
    clear(): void;
    addBone(bone: Bone2D): void;
    removeBone(id: number): void;
    addConsecutiveBone(directionUV: V2 | Bone2D, length: number, clockwiseDegs: number, anticlockwiseDegs: number): void;
    getBoneConnectionPoint(): ConnectionType;
    getConnectedBoneNumber(): number;
    getConnectedChainNumber(): number;
    getEmbeddedTarget(): V2;
    getBaseboneConstraintType(): BaseboneConstraintType;
    getBaseboneConstraintUV(): V2 | undefined;
    getBaseLocation(): V2;
    getEffectorLocation(): V2;
    getLastTargetLocation(): V2;
    getLiveChainLength(): number;
    setBaseboneRelativeConstraintUV(constraintUV?: V2): void;
    setConnectedBoneNumber(boneNumber: number): void;
    setConnectedChainNumber(chainNumber: number): void;
    setBoneConnectionPoint(point: ConnectionType): void;
    setBaseboneConstraintUV(constraintUV: V2): void;
    setBaseLocation(baseLocation: V2): void;
    setBaseboneConstraintType(value: BaseboneConstraintType): void;
    setFixedBaseMode(value: boolean): void;
    setMaxIterationAttempts(maxIteration: number): void;
    setMinIterationChange(minIterationChange: number): void;
    setSolveDistanceThreshold(solveDistance: number): void;
    solveForEmbeddedTarget(): number | undefined;
    resetTarget(): void;
    solveForTarget(t: V2): number;
    solveIK(target: V2): number | undefined;
    updateChainLength(): void;
    cloneBones(): Bone2D[];
}
